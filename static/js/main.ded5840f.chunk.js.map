{"version":3,"sources":["cmps/Navbar.jsx","cmps/Footer.jsx","cmps/Item.jsx","cmps/List.jsx","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","to","Footer","Item","item","List","arr","console","log","map","idx","key","Home","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAIe,SAASA,EAAOC,GAI7B,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,2CACb,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAI,KAA3B,QACA,6BACE,yBAAKD,UAAU,qBACb,kBAAC,IAAD,CAAMC,GAAI,KAAV,OACA,kBAAC,IAAD,CAAMA,GAAI,KAAV,YCdC,SAASC,EAAOH,GAI7B,OACE,4BAAQC,UAAU,QAChB,yBAAKA,UAAU,kBACd,4CCPQ,SAASG,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAI7B,OACE,yBAAKJ,UAAU,QACb,2BAAII,ICLK,SAASC,EAAT,GAAsB,IAAPC,EAAM,EAANA,IAI5B,OAFFC,QAAQC,IAAIF,GAGJ,yBAAKN,UAAU,QAEZM,EAAIG,KAAI,SAACL,EAAKM,GAAN,OACT,kBAACP,EAAD,CAAMQ,IAAKD,EAAKN,KAAMA,QCNjB,SAASQ,EAAKb,GAE3B,OACE,yBAAKC,UAAU,kBACb,kBAACF,EAAD,MACA,kCACA,kCACA,kBAACO,EAAD,CAAMC,IAAK,CAAC,SAAS,YAAY,YACjC,kBAACJ,EAAD,OCOSW,MAbf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,KAAK,IAAIC,UAAYH,EAAOI,OAAK,QCD9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ded5840f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nexport default function Navbar(props) {\r\n\r\n\r\n\r\n  return (\r\n    <nav className='full'>\r\n      <div className=\"main-container\">\r\n        <div className='flex justify-space-between align-center'>\r\n          <Link className='logo' to={'/'} >logo</Link>\r\n          <div>\r\n            <div className='flex align-center'>\r\n              <Link to={'/'}>one</Link>\r\n              <Link to={'/'}>two</Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nexport default function Footer(props) {\r\n\r\n\r\n\r\n  return (\r\n    <footer className='full'>\r\n      <div className=\"main-container\">\r\n       <p>i am footer</p>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nexport default function Item({ item }) {\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"item\">\r\n      <p>{item}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport Item from './Item';\r\n\r\nexport default function List({arr}) {\r\n\r\nconsole.log(arr);\r\n\r\n  return (\r\n        <div className=\"list\">\r\n           {\r\n           arr.map((item,idx)=> (\r\n          <Item key={idx} item={item} />\r\n           ))\r\n           }\r\n        </div>\r\n  )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport Navbar from '../cmps/Navbar'\r\nimport Footer from '../cmps/Footer'\r\nimport List from '../cmps/List';\r\n\r\nexport default function Home(props) {\r\n\r\n  return (\r\n    <div className='main-container' >\r\n      <Navbar />\r\n      <h1>hi</h1>\r\n      <h1>hi</h1>\r\n      <List arr={['asdasd','asdsadasd','asdasd']} />\r\n      <Footer/>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Link } from 'react-router-dom'\n\nimport Home from './pages/Home';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n       \n        <Switch>\n          <Route path=\"/\" component={ Home } exact />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/styles/global.scss'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister();\n"],"sourceRoot":""}